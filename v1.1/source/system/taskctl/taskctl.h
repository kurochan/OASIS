/*
 *  task.h
 *  OASIS Project
 *
 *  Created by Liva on 11/01/12.
 *  Generated by TDD
 *
 */
//@IOプロセスが呼び出せない関数を記述しておくべき
const static char GDT_NO_ENTRY		= 0;
const static char NOW_OPERATING		= 1;
const static char WAITING_IO		= 2;
const static char OPERATING_IO_FUNC	= 3;

const static short TASK_GDT0			= 3;
const static short MAX_TASK_NUM		= 8192-TASK_GDT0;
const static char MAX_PRIORITY			= 5 ;		// タスク優先度の最大値。アイドルタスクはこの値+1

const static UINT  STACK_SIZE = 64 * 1024;
const static int AR_TSS32					=0x0089;

struct TSS32 {
	int backlink, esp0, ss0, esp1, ss1, esp2, ss2, cr3;
	int eip,eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;
	int es, cs, ss, ds, fs, gs;
	int ldtr, iomap;
};

class TASK {
public:
	char status;
	char priority;
	short pid;				//GDT登録時の番号-TASK_GDT0
	TASK *parent;
	TASK *taskNext;			//有効なタスクの線形リスト
	TASK *priorityNext;		//優先度順の線形リスト（スリープ中のタスクは除外されるため、taskNextとは同一化できない）

	TSS32 tss;
	UINT stack_entry;
	INPUTFIFO	*inputfifo;
	int fpu[108/4];
	Caller *stcaller[MAX_ID];					// IOデバイスからの信号を処理する関数の登録場所
	UINT ioWaitID;
	UINT iodata;
};

class TASKCTL {
	TASK _io_task, _idle_task;
	short _next_GDT_NUM;
	void _DelCntFromPrtyLst(void);	//優先度順タスク線形リストから現在のタスクを消去
	void _DelCntFromPrtyLst2(void);	//優先度順タスク線形リストから現在のタスクを消去

	TASK *task_fpu;
	void _FpuInit(int *fpu);
	SMALL_MEMORY *taskmem;						//TASK構造体を確保するための動的確保システム
	TSS32 *f_alloc(void) ;
	void _TaskInit(TASK *task);
	void _SearchTaskFromPID(const short pid);
	void CreateIOProc(TASK *target, UINT data);
	FIFO *_procWaitingKilled ;
	void _KillIOProc(void);

public:
	TASK *current;
	void Init(void);
	short Fork(void);
	void Tswitch_F(void);
	void Tswitch_V(void);
	void Kill(void);

	UINT next_tswitch;							// 次のタスクスイッチする時刻（単位はタイマ時刻）
	void Create(void (*task_func)());
	UINT GetSignal(void);
	void SetInput(int _id, Caller *caller);
	void RemoveInput(int id);
	short GetPid(void);
	TASK *GetCurrentTASK(void);
	void _Tswitch(void);					//単純に次のタスクへタスクスイッチ
	void Tswitch_I(const short pid);			// どうしても避けられない外的要因によるタスクスイッチ
	void Tswitch_IO(void);
	void WaitIO(const int _id);
	void PrepareIOTask_O(void);
	void ContinueProc(const short pid);
	void inthandler07(void);
}extern taskctl;


void PrepareIOTask(void);
